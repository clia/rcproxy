name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - 
      name: Add musl
      run: sudo apt install -y musl-tools
    - 
      name: Git Checkout
      uses: actions/checkout@v3
    - 
      name: âš¡ Cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - 
      name: Add rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - 
      name: Rust musl
      run: rustup target add x86_64-unknown-linux-musl
    - 
      name: Build ${{ github.event.repository.name }}
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --target x86_64-unknown-linux-musl --release --all-features
    -
      name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
          ghcr.io/${{ github.repository }}
        tags: |
          type=raw,value=1.0.${{ github.run_number }},priority=1000
          type=ref,event=branch
          type=sha
          type=raw,value=latest
    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    -
      name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    -
      name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    -
      name: Build and push
      uses: docker/build-push-action@master
      with:
        context: .
        file: Dockerfile
        secrets: |
          GO_PRIVATE_TOKEN=${{ secrets.GO_PRIVATE_TOKEN }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max
#          platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}